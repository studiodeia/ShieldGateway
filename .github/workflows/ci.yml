name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-matrix:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [16.x, 18.x, 20.x]
        n8n-version: ['1.0.0', '2.0.0']

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install specific n8n-workflow version
      run: npm install n8n-workflow@${{ matrix.n8n-version }} --no-save
    
    - name: Run tests
      run: npm test
      
    - name: Lint
      run: npm run lint
      
    - name: Collect test results
      run: echo "n8n=${{ matrix.n8n-version }} node=${{ matrix.node-version }} platform=${{ matrix.os }} TESTS_PASS=1" >> $GITHUB_OUTPUT
      id: test_results

  build-multi-arch:
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build for multiple architectures
      run: |
        mkdir -p dist
        
        # Ambiente de build para x64
        docker buildx build --platform linux/amd64 \
          -t shieldgateway-builder-amd64 \
          --target builder \
          -o type=local,dest=./dist/amd64 .
          
        # Ambiente de build para ARM
        docker buildx build --platform linux/arm64 \
          -t shieldgateway-builder-arm64 \
          --target builder \
          -o type=local,dest=./dist/arm64 .
          
        # Copiar os binários compilados
        mkdir -p dist/bin
        cp -r dist/amd64/node_modules/re2-wasm/bin/amd64 dist/bin/
        cp -r dist/arm64/node_modules/re2-wasm/bin/arm64 dist/bin/
      
  security:
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'ShieldGateway'
        path: '.'
        format: 'HTML'
        out: 'reports'
        
    - name: Upload dependency check report
      uses: actions/upload-artifact@v3
      with:
        name: Dependency Check Report
        path: ${{ github.workspace }}/reports

  benchmarks:
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance benchmarks
      run: npm run benchmark
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: Benchmark Results
        path: ${{ github.workspace }}/benchmark-results.json
        
    - name: Check latency threshold
      run: node scripts/check-benchmark-threshold.js 30  # Verificar se latência está abaixo de 30ms

  fuzz-testing:
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        
    - name: Install dependencies
      run: npm ci
    
    - name: Run fuzz tests
      run: npm run test:fuzz
      
    - name: Upload fuzz test results
      uses: actions/upload-artifact@v3
      with:
        name: Fuzz Test Results
        path: ${{ github.workspace }}/fuzz-results

  publish:
    runs-on: ubuntu-latest
    needs: [build-multi-arch, security, benchmarks, fuzz-testing]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download multi-arch binaries
      uses: actions/download-artifact@v3
      with:
        name: multi-arch-binaries
        path: dist/bin
    
    - name: Build
      run: npm run build
    
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} 